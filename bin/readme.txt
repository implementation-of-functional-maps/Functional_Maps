[船冨先生からおっしゃっていただいた事項]
・まずはグラフ構造の行列表現などを調べてみてもらえませんか？
→グラフ構造を行列表現した行列は 隣接行列 と呼ばれます。与えられた行列が疎行列の場合は格納方法として圧縮行格納方式が一般的なようです。
①各行、各列に各頂点を配置するものと
②（始点、終点）をセットで各行に配置するもの
と表示するものがあります。これ以外にもあるのかもしれませんが、現状調べられているのは上記２点です。
②の表示のほうが、エラーを回避しやすいとのことでした。
また、データの容量も下記の場合のほうが小さくなると思います。（行列以外だと隣接リストという表示の方法もあるようです。）

[森先生からおっしゃっていただいた事項]
下記の事項について実装を試みました。実装できたファイルについては添付してあります。
<注意点>
添付したプログラムはアルゴリズムは健全だと思いますが、データの定義が適切でないため、動きません。
[理由]
先生に教えていただきましたShapeNetのデータを実装しようとした際、データをテキストエディタで表示して中身を解析しようとしましたが、
表示されたデータが何を示しているか解読できておりません。
[質問]
お手数ですが、ShapeNetで与えられているデータを実装する方法、または、データの解析の仕方をお教え願えませんでしょうか？

1) ある頂点から全頂点を visit するとか、
→このアルゴリズムは “ダイクストラ法" により実装できます。　ダイクストラ法についてはC＋＋でプログラムを書きました。
→この拡張版として、任意の頂点からの最短経路を計算するJohnsonのアルゴリズムがあるようですが、まだ実装できておりません。

2) 最大の「密度」の２部グラフに分割するとか、
→このアルゴリズムは "２部グラフの最大マッチングアルゴリズム" を利用して以下のようになります。
「各頂点にたいして、始点と終点を付加して最大フローを求め、その最大値をとる頂点のグループを出力する」アルゴリズムです。
---アルゴリズムの概要---
すべての２点を結ぶ枝の距離を１とする。
（１）始点(s)と終点(t)の２点をグラフに付加
（２）始点(s)から任意の点に対して距離１の枝を張る。
（３）始点(s)と結び付けられなかった点を終点(t)に対して枝を張る。
（４）与えられたグラフの最大フローを計算→密度の値を記録するための配列(mitsudo[2^(MAX_V)])に格納　（２部グラフの最大マッチングアルゴリズム）
（５）mitsudo[2^(MAX_V)]の最大値をとる（始点(s)に結びついている頂点、終点(t)に結びついている頂点）の組みを出力
--------------------------------
→始点と終点がすでに決まっている場合（ （１）、（２）、（３）を省略した場合）についてはC＋＋でプログラムを書きました。

3) １点の対応を所与として、２つのグラフの最大マッチとか
→このアルゴリズムは “Dinic法" により実装できます。　Dinic法についてはC＋＋でプログラムを書きました。


今後ともどうぞ宜しくお願い申し上げます。